[{"content":" 不要再下雪了！求求了！\nPlan A-1 北美逛衣服吃午饭→天美玩游戏看非遗→晋商博物院→山西饭店\n09:20 和涛涛会师\n15:40 晋商博物院 逛到闭馆 17:00 -\u0026gt; 山西饭店\n打车10min 步行25min：穿过柳巷，文瀛公园 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min\n19:40 到太原南\nPlan A-2 09:20 和涛涛会师 09:30 太原南站出发-\u0026gt;天美新天地 打车20min 09:50 天美新天地 13:00 天美新天地-\u0026gt;双塔公园 打车15min 13:20 双塔公园 (2h) 进塔：淡季（11月1日—次年3月31日）9:00—17:00\n不进塔可以早点去晋商博物院\n15:20 双塔公园 -\u0026gt; 晋商博物院 打车16min\n15:40 晋商博物院 逛到闭馆 17:00 -\u0026gt; 山西饭店\n打车10min 步行25min：穿过柳巷，文瀛公园 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min\n19:40 到太原南\nPlan A-3 09:20 和涛涛会师 09:30 太原南站出发-\u0026gt;天美新天地 打车20min 09:50 天美新天地 13:00 天美新天地 -\u0026gt; 晋商博物院 打车20min 13:20 晋商博物院 (2h) 15:20 晋商博物院 -\u0026gt; 双塔公园 打车16min 15:40 双塔公园 逛到闭馆 17:00 -\u0026gt; 山西饭店 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min 19:40 到太原南 Plan A-4 09:20 和涛涛会师 09:30 太原南站出发-\u0026gt;晋商博物院 打车20min 09:50 晋商博物院 逛到11:30点吃饭\n11:30 晋商博物院 -\u0026gt; 天美 打车18min 12:00 天美新天地 干饭\n14:00 玩玩看看非遗\n15:30 双塔公园 打车 逛到闭馆 17:00 -\u0026gt; 山西饭店 打车 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min 19:40 到太原南 ","permalink":"https://liang512.github.io/post/travel/20240203_taiyuan/","summary":"不要再下雪了！求求了！\nPlan A-1 北美逛衣服吃午饭→天美玩游戏看非遗→晋商博物院→山西饭店\n09:20 和涛涛会师\n15:40 晋商博物院 逛到闭馆 17:00 -\u0026gt; 山西饭店\n打车10min 步行25min：穿过柳巷，文瀛公园 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min\n19:40 到太原南\nPlan A-2 09:20 和涛涛会师 09:30 太原南站出发-\u0026gt;天美新天地 打车20min 09:50 天美新天地 13:00 天美新天地-\u0026gt;双塔公园 打车15min 13:20 双塔公园 (2h) 进塔：淡季（11月1日—次年3月31日）9:00—17:00\n不进塔可以早点去晋商博物院\n15:20 双塔公园 -\u0026gt; 晋商博物院 打车16min\n15:40 晋商博物院 逛到闭馆 17:00 -\u0026gt; 山西饭店\n打车10min 步行25min：穿过柳巷，文瀛公园 17:30 山西饭店 开吃！\n19:20 \u0026#x203c;\u0026#xfe0f; 最晚19:30出发 山西饭店-\u0026gt;太原南站 打车16min\n19:40 到太原南\nPlan A-3 09:20 和涛涛会师 09:30 太原南站出发-\u0026gt;天美新天地 打车20min 09:50 天美新天地 13:00 天美新天地 -\u0026gt; 晋商博物院 打车20min 13:20 晋商博物院 (2h) 15:20 晋商博物院 -\u0026gt; 双塔公园 打车16min 15:40 双塔公园 逛到闭馆 17:00 -\u0026gt; 山西饭店 17:30 山西饭店 开吃！","title":"和涛涛太原一日游"},{"content":"1. Generate crypto material for new peer Modify the script test-network/organizations/fabric-ca/registerEnroll.sh to add the configuration of peer1:\ninfoln \u0026#34;Registering peer1\u0026#34; set -x fabric-ca-client register --caname ca-org1 --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/org1/tls-cert.pem { set +x; } 2\u0026gt;/dev/null infoln \u0026#34;Generating the peer1 msp\u0026#34; set -x fabric-ca-client enroll -u https://peer1:peer1pw@localhost:7054 --caname ca-org1 -M ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp --csr.hosts peer1.org1.example.com --tls.certfiles ${PWD}/organizations/fabric-ca/org1/tls-cert.pem { set +x; } 2\u0026gt;/dev/null cp ${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp/config.yaml infoln \u0026#34;Generating the peer1-tls certificates\u0026#34; set -x fabric-ca-client enroll -u https://peer1:peer1pw@localhost:7054 --caname ca-org1 -M ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls --enrollment.profile tls --csr.hosts peer1.org1.example.com --csr.hosts localhost --tls.certfiles ${PWD}/organizations/fabric-ca/org1/tls-cert.pem { set +x; } 2\u0026gt;/dev/null cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/signcerts/* ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/keystore/* ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/org1.example.com/msp/tlscacerts/ca.crt cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/tlscacerts/* ${PWD}/organizations/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem cp ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp/cacerts/* ${PWD}/organizations/peerOrganizations/org1.example.com/ca/ca.org1.example.com-cert.pem Then, we can see that the MSP files of peer1 are generated in test-network/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp. These files identify the identity of peer1.\n2. Add the docker-compose configuration of the new peer to create a new container Add the configuration to file test-network/docker/docker-compose-test-net.yaml:\npeer1.org1.example.com: container_name: peer1.org1.example.com image: hyperledger/fabric-peer:latest environment: #Generic peer variables - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=fabric_test - FABRIC_LOGGING_SPEC=INFO #- FABRIC_LOGGING_SPEC=DEBUG - CORE_PEER_TLS_ENABLED=true - CORE_PEER_PROFILE_ENABLED=true - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt # Peer specific variabes - CORE_PEER_ID=peer1.org1.example.com - CORE_PEER_ADDRESS=peer1.org1.example.com:8051 - CORE_PEER_LISTENADDRESS=0.0.0.0:8051 - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:8052 - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8052 - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:8051 - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:8051 - CORE_PEER_LOCALMSPID=Org1MSP # - CORE_OPERATIONS_LISTENADDRESS=peer1.org1.example.com:9444 volumes: - /var/run/docker.sock:/host/var/run/docker.sock - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/etc/hyperledger/fabric/msp - ../organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/etc/hyperledger/fabric/tls - peer1.org1.example.com:/var/hyperledger/production working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer command: peer node start ports: - 8051:8051 # - 9444:9444 networks: - test cli: ... depends_on: ... - peer1.org1.example.com ... 3. Joining peer1 in channel and install chaincode on peer1 Up to now, the new peer node peer1 has been created. However, peer1 is not contained in the channel. So, we need to join peer1 in the channel and then install chaincode on it.\n# Add peer1 CORE_PEER_ADDRESS=localhost:8051 peer channel join -b channel-artifacts/mychannel.block # Install chaincode on peer1 CORE_PEER_ADDRESS=localhost:8051 peer lifecycle chaincode install liang.tar.gz OK, we are successful!\n","permalink":"https://liang512.github.io/post/hyperledgerfabric/addpeer/","summary":"1. Generate crypto material for new peer Modify the script test-network/organizations/fabric-ca/registerEnroll.sh to add the configuration of peer1:\ninfoln \u0026#34;Registering peer1\u0026#34; set -x fabric-ca-client register --caname ca-org1 --id.name peer1 --id.secret peer1pw --id.type peer --tls.certfiles ${PWD}/organizations/fabric-ca/org1/tls-cert.pem { set +x; } 2\u0026gt;/dev/null infoln \u0026#34;Generating the peer1 msp\u0026#34; set -x fabric-ca-client enroll -u https://peer1:peer1pw@localhost:7054 --caname ca-org1 -M ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp --csr.hosts peer1.org1.example.com --tls.certfiles ${PWD}/organizations/fabric-ca/org1/tls-cert.pem { set +x; } 2\u0026gt;/dev/null cp ${PWD}/organizations/peerOrganizations/org1.example.com/msp/config.yaml ${PWD}/organizations/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp/config.yaml infoln \u0026#34;Generating the peer1-tls certificates\u0026#34; set -x fabric-ca-client enroll -u https://peer1:peer1pw@localhost:7054 --caname ca-org1 -M ${PWD}/organizations/peerOrganizations/org1.","title":"Add a Peer Node to an Organization"},{"content":"1 Attribute vector $v$ -\u0026gt; $g^v$ Policy vector $x$ -\u0026gt; $rx$, where $r\\leftarrow Z_p$ Verify $g^{v\\cdot rx}=g^0$ System Model Requester is semi-honest, which means that they honestly perform protocol but may attempt to learn the privacy of other users.\nWorker may claim the honest CS doesn\u0026rsquo;t return correct matching tasks. 想要申请自己不满足任务需求的任务，栽赃服务器返回了错误的结果； keyword; collude\nServer：为了节省算力返回错误的匹配结果;篡改密文\npublic verifiable outsourced ABE: Worker 拒绝任务后可通过proof验证 Server进行了正确匹配；\nVerifiability: 对于Worker是否满足Requester制定的访问策略，可将双方的属性向量（任务访问策略向量）秘密共享or使用同态commitment：\n对向量$v=(v_0,v_1,v_2)$: Authority授权密钥时声称向量对应位置的commitment。如$AU_0$计算$Com(v_0)=g^{v_0}h^{r_0}$，最后将$Coms=(Com(v_0), Com(v_1), Com(v_2))$发送到区块链存储。 对向量$x(x_0,x_1,x_2)$: 利用Two-party secret sharing，首先Requester对$x$进行两方的加法秘密共享$x_0 = x_0^1+x_0^2$\u0026hellip; 验证：$Com(v_0,r_0)^{x_0^1}\\cdot Com(v_0,r_0)^{x_0^2}=Com(v_0\\cdot x_0,r_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=Com(0)$ 忽略了随机数r ，$Com(v_0,r_0)^{x_0^1}\\cdot Com(v_0,r_0)^{x_0^2}=Com(v_0\\cdot x_0,r_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=g^{v\\cdot x}h^{\\sum \\limits_{i=0}^n r_i\\cdot x_i}=g^0\\cdot h^{{\\sum \\limits_{i=0}^n r_i\\cdot x_i}}$ 对于Worker是否满足Requester制定的访问策略，可将双方的属性向量（任务访问策略向量）秘密共享or使用同态commitment：\n对向量$v=(v_0,v_1,v_2)$: Authority授权密钥时声称向量对应位置的commitment。如$AU_0$计算$Com(v_0)=g^{v_0}h^{r_0}$，最后将$Coms=(Com(v_0), Com(v_1), Com(v_2))$发送到区块链存储。 对向量$x(x_0,x_1,x_2)$: 利用Two-party secret sharing，首先Requester对$x$进行两方的加法秘密共享$x_0 = x_0^1+x_0^2$\u0026hellip; 验证：$Com(v_0)^{x_0^1}\\cdot Com(v_0)^{x_0^2}=Com(v_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=Com(0)$ 忽略了随机数r ，$Com(v_0,r_0)^{x_0^1}\\cdot Com(v_0,r_0)^{x_0^2}=Com(v_0\\cdot x_0,r_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=g^{v\\cdot x}h^{\\sum \\limits_{i=0}^n r_i\\cdot x_i}=g^0\\cdot h^{{\\sum \\limits_{i=0}^n r_i\\cdot x_i}}$ Fog nodes: semi-honest\nmulti-authority ABE\n可验证： anyone can verify matching result whether correct\nTwo parts:\nWorker是否有权限，Worker的属性是否满足任务需求，即是否满足属性加密谓词。 Keyword是否包含在匹配结果中，即Trapdoor是否match密文。 private verification：\nWorker自己执行一遍解密，需要配合签名或者哈希判断解密结果是否正确。 如果Match，Worker在本地执行一遍Search算法; 如果返回没有Match的密文😩，Worker对所有密文解密得到对应密文的Bloom filter，然后判断搜索的关键字是否包含在Bloom Filter。 public verification： 不能公布Bloom filter；验证要是高效的：不能比重新执行一遍Search算法消耗还多；\n直接将Search算法中的中间变量公开，Public verifier只需进行乘法；同时验证了Two parts；但是，如果服务器公布错误的值，也会通过verify。存在的问题：服务器可能公布错误的值。。。。加密另一个消息并公布哈希值，然后用$e_1$解密，判断是否相等，以此来验证$e_1$是否正确。 20240131 Bug：\n$e(g_1^{\\sigma_uA^\\top U}, g_2^{y_{u,2}h/\\sigma_u})=e(g_1,g_2)^{y_{u,2}hA^\\top U}$ 提前将随机数$\\sigma$消掉 The CS checks wether the following equation is holds: $$e(g_1,g_2)^{y_{u,2}hA^\\top U}=e(g_1,g_2)^{(k-y_{u,1})hA^\\top U}$$ If the equation holds, then CS can claim $y_u=k$. cs没有返回全部结果 Solutions:\n扩大$k$的取值范围\n使用韦达定理 $k\\in\\mathbb{Z^+}$ 需要用户自己计算属性向量，为了抵御恶意用户申请错误的密钥，改为单机构才可以 用户撤销、外包部分解密 \u0026hellip;\n","permalink":"https://liang512.github.io/post/research/scheme/","summary":"1 Attribute vector $v$ -\u0026gt; $g^v$ Policy vector $x$ -\u0026gt; $rx$, where $r\\leftarrow Z_p$ Verify $g^{v\\cdot rx}=g^0$ System Model Requester is semi-honest, which means that they honestly perform protocol but may attempt to learn the privacy of other users.\nWorker may claim the honest CS doesn\u0026rsquo;t return correct matching tasks. 想要申请自己不满足任务需求的任务，栽赃服务器返回了错误的结果； keyword; collude\nServer：为了节省算力返回错误的匹配结果;篡改密文\npublic verifiable outsourced ABE: Worker 拒绝任务后可通过proof验证 Server进行了正确匹配；\nVerifiability: 对于Worker是否满足Requester制定的访问策略，可将双方的属性向量（任务访问策略向量）秘密共享or使用同态commitment：\n对向量$v=(v_0,v_1,v_2)$: Authority授权密钥时声称向量对应位置的commitment。如$AU_0$计算$Com(v_0)=g^{v_0}h^{r_0}$，最后将$Coms=(Com(v_0), Com(v_1), Com(v_2))$发送到区块链存储。 对向量$x(x_0,x_1,x_2)$: 利用Two-party secret sharing，首先Requester对$x$进行两方的加法秘密共享$x_0 = x_0^1+x_0^2$\u0026hellip; 验证：$Com(v_0,r_0)^{x_0^1}\\cdot Com(v_0,r_0)^{x_0^2}=Com(v_0\\cdot x_0,r_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=Com(0)$ 忽略了随机数r ，$Com(v_0,r_0)^{x_0^1}\\cdot Com(v_0,r_0)^{x_0^2}=Com(v_0\\cdot x_0,r_0\\cdot x_0)$ $\\prod \\limits_{i=0}^2 Com(v_i x_i)=g^{v\\cdot x}h^{\\sum \\limits_{i=0}^n r_i\\cdot x_i}=g^0\\cdot h^{{\\sum \\limits_{i=0}^n r_i\\cdot x_i}}$ 对于Worker是否满足Requester制定的访问策略，可将双方的属性向量（任务访问策略向量）秘密共享or使用同态commitment：","title":"Scheme"},{"content":"Intro 这篇文章考虑加密者（Data Owner,DO）恶意的情况时，如何保证数据的隐私性。\n我们首先要清楚恶意的DO会做什么事情：\n嵌入错误的访问策略让无权限的用户解密； 将密钥泄露给无权限的用户； Sanitizable Access Control System for Secure Cloud Storage Against Malicious Data Publishers 1 对以上的1，增加一个可信的Sanitizer在密文上执行check操作，检查是否嵌入了正确的访问策略，其实相当于执行了一遍ABE的解密操作，将与访问策略$M$关联的密文组件与随机选择的属性集合$S\\in M$对应的密钥（这个密钥并不是authority生成，而是sanitizer按照密钥形式仿造的，仅为了验证）配对,通过验证则为正确的密文，此时的密文解密需要恢复出$e(g,g)^{\\alpha s}$； 通过上述访问策略验证后，还需考虑DO直接将加密密钥泄露给无权限的用户。可信的sanitizer重新生成一个密文(访问策略秘密值为$s\\prime$)，然后将两个密文聚合在一起，此时的密文解密需要恢复出$e(g,g)^{\\alpha (s+s\u0026rsquo;)}$； 疑问： 对以上的1，随机选择的属性集合$S$满足访问策略是否可以确定密文就正确： 例如DO声称访问策略为M=\u0026ldquo;A\u0026rdquo;，但是在加密时使用错误的访问策略$M\u0026rsquo;$=\u0026ldquo;A or B\u0026rdquo;，在check时随机选择的属性集合为${ A }$，也可以通过验证，但是此时携带有属性B的私钥的用户也可以解密。并未解决第一个问题。\nSanitizable Cross-System Authorization for Secure Communication in Intelligent Connected Vehicle 2 对IBE的密文，可以解决第一个问题 A Sanitizable Access Control With Policy-Protection for Vehicular Social Networks 3 访问策略是AND-Gate，可以解决第一个问题 Verifiable Outsourced Attribute-Based Encryption Scheme for Cloud-Assisted Mobile E-health System 4 将外包加密与这个场景结合，服务器需要将访问策略嵌入密文，sanitizer检测服务器输出的密文是否正确，这个应用场景比上面那个更贴切生活一些。但是check密文时仍然存在和第一篇一样的问题。 Conclusion Check的本质思想就是执行了一遍解密操作，并未将消息解密出来 Sanitizing的关键思想就是给密文重新绑定另一个密文，另一个密文组件一定是可信生成的 Reference W. Susilo, P. Jiang, J. Lai, F. Guo, G. Yang and R. H. Deng, \u0026ldquo;Sanitizable Access Control System for Secure Cloud Storage Against Malicious Data Publishers,\u0026rdquo; in IEEE Transactions on Dependable and Secure Computing, vol. 19, no. 3, pp. 2138-2148, 1 May-June 2022, doi: 10.1109/TDSC.2021.3058132.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nY. Zhao, H. Yu, Y. Liang, H. Jiang, G. Marine and Y. Ren, \u0026ldquo;Sanitizable Cross-System Authorization for Secure Communication in Intelligent Connected Vehicle,\u0026rdquo; in IEEE Transactions on Vehicular Technology, doi: 10.1109/TVT.2023.3287569.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nY. Zhao, H. Yu, Y. Liang, M. Conti, W. Bazzi and Y. Ren, \u0026ldquo;A Sanitizable Access Control With Policy-Protection for Vehicular Social Networks,\u0026rdquo; in IEEE Transactions on Intelligent Transportation Systems, doi: 10.1109/TITS.2023.3285623.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nY. Miao et al., \u0026ldquo;Verifiable Outsourced Attribute-Based Encryption Scheme for Cloud-Assisted Mobile E-health System,\u0026rdquo; in IEEE Transactions on Dependable and Secure Computing, doi: 10.1109/TDSC.2023.3292129.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://liang512.github.io/post/sanitizable_abe/sanitizableencryption/","summary":"Intro 这篇文章考虑加密者（Data Owner,DO）恶意的情况时，如何保证数据的隐私性。\n我们首先要清楚恶意的DO会做什么事情：\n嵌入错误的访问策略让无权限的用户解密； 将密钥泄露给无权限的用户； Sanitizable Access Control System for Secure Cloud Storage Against Malicious Data Publishers 1 对以上的1，增加一个可信的Sanitizer在密文上执行check操作，检查是否嵌入了正确的访问策略，其实相当于执行了一遍ABE的解密操作，将与访问策略$M$关联的密文组件与随机选择的属性集合$S\\in M$对应的密钥（这个密钥并不是authority生成，而是sanitizer按照密钥形式仿造的，仅为了验证）配对,通过验证则为正确的密文，此时的密文解密需要恢复出$e(g,g)^{\\alpha s}$； 通过上述访问策略验证后，还需考虑DO直接将加密密钥泄露给无权限的用户。可信的sanitizer重新生成一个密文(访问策略秘密值为$s\\prime$)，然后将两个密文聚合在一起，此时的密文解密需要恢复出$e(g,g)^{\\alpha (s+s\u0026rsquo;)}$； 疑问： 对以上的1，随机选择的属性集合$S$满足访问策略是否可以确定密文就正确： 例如DO声称访问策略为M=\u0026ldquo;A\u0026rdquo;，但是在加密时使用错误的访问策略$M\u0026rsquo;$=\u0026ldquo;A or B\u0026rdquo;，在check时随机选择的属性集合为${ A }$，也可以通过验证，但是此时携带有属性B的私钥的用户也可以解密。并未解决第一个问题。\nSanitizable Cross-System Authorization for Secure Communication in Intelligent Connected Vehicle 2 对IBE的密文，可以解决第一个问题 A Sanitizable Access Control With Policy-Protection for Vehicular Social Networks 3 访问策略是AND-Gate，可以解决第一个问题 Verifiable Outsourced Attribute-Based Encryption Scheme for Cloud-Assisted Mobile E-health System 4 将外包加密与这个场景结合，服务器需要将访问策略嵌入密文，sanitizer检测服务器输出的密文是否正确，这个应用场景比上面那个更贴切生活一些。但是check密文时仍然存在和第一篇一样的问题。 Conclusion Check的本质思想就是执行了一遍解密操作，并未将消息解密出来 Sanitizing的关键思想就是给密文重新绑定另一个密文，另一个密文组件一定是可信生成的 Reference W.","title":"Sanitizable Encryption"},{"content":"Keyword-based matching Proxy-Free Privacy-Preserving Task Matching with Efficient Revocation in Crowdsourcing 1 这篇文章提出了一个无需代理重加密的基于关键字的任务匹配模型，支持用户撤销。作者公布代码。\n基本模型是经典的基于可搜索加密的关键字匹配模型，之后加入了 Server-Local Revocation (SLR)，实现用户撤销的思想很简单：服务器维护一个撤销用户列表 Revocation List (RL)，当有用户离开系统时，将该用户的相关信息存入RL实现撤销，在每次执行匹配算法时，服务器会先验证改用户是否在RL在，如果在RL中，则此次搜索终止，如不在RL中，说明此次搜索合法，进行匹配操作。\n之后为了减少RL的存储开销，作者提出了Global Revocation (GR)，为密钥、密文、搜索陷门加入了版本号（version number），系统周期性地执行$ReKeyGen$算法，清空RL，重新生成公钥、主私钥和密文更新密钥（用来更新之前版本的密文），并为worker分发新的密钥。\n优点：撤销机制简单\n缺点：每次匹配均需进行两次pairing操作以检查用户权限；在 GR 中，密钥机构需要周期性地上线执行$ReKeyGen$算法，即使是在RL为空时？（作者没有考虑这一点）。\n思考：学习到了撤销机制的实现方法：维护撤销用户列表和版本号。\n\u0026#x1f4dd; Note: 写文章思路：先写出一个基础方案，之后进行扩展，本文在基础匹配方案上扩展了用户撤销机制。先写SLR，然后针对 SLR 中RL的存储开销问题，提出GR，让系统定期清空RL，引入版本号。\nABE Attribute-Based Encryption with Publicly Verifiable Outsourced Decryption Transform算法输出的不是ElGamal形式的密文，而是把中间计算过程中的配对值输出。 验证者通过 sampling technique 随机选择pairing results进行验证。 Achieving public verification by combining sampling technique and game theory.\nMulti-Keyword Searchable and Verifiable Attribute-Based Encryption Over Cloud Data 只支持合取的关键字查询；需要公布一个关键字集合之间的映射；使用签名验证密文的complete； 是否可以做多关键字的检索 without bilinear pairing ?\nTrustAccess: A Trustworthy Secure Ciphertext-Policy and Attribute Hiding Access Control Scheme based on Blockchain 对向量使用ElGamal算法加密，利用同态性质验证向量内积为0； 属性向量$v$中有有一维是1，那么$h^r$就暴露了，别的$v$是否就能求出？ Access policy使用polynomial编码 -\u0026gt; hidden policy\nRegistered Attribute-Based Encryption (RABE) size of CRS quadratic in L time of registration linear in L\u0026mdash;-slow size of mpk, hdk and time of enc, dec polylogarithmically with L\nMain Contribution: resolve leakage of master secret key (msk) problem.\nlimitations:\nExist priori bound L on the number of users in the system Trusted output CRS Task Assignment Bid-based Personalized Location Privacy Trading in Double Auction for Mobile Crowdsensing 保护用户位置隐私\nTruthful Online Double Auctions for Mobile Crowdsourcing: An On-Demand Service Strategy 不保护bid\nTruthful online double auctions for dynamic mobile crowdsourcing 不保护bid\nEdge Resource Prediction and Auction for Distributed Spatial Crowdsourcing With Differential Privacy 采用非对称加密保护bid\nLocation-based Towards preserving worker location privacy in spatial crowdsourcing 2015 加法同态，在位置密文上进行运算比较来分配\nPriRadar: A Privacy-Preserving Framework for Spatial Crowdsourcing, 2020 利用属性加密，将位置经纬度设置为密文访问策略。且保护了任务内容\nProtecting Location Privacy of Users Based on Trajectory Obfuscation in Mobile Crowdsensing 2022 差分隐私\nRoPriv: Road Network-aware Privacy-preserving Framework in Spatial Crowdsourcing 2023 差分隐私\niTAM: Bilateral Privacy-Preserving Task Assignment for Mobile Crowdsensing 2021 minimize travel distance; Bilateral privacy includes task requirements and worker profiles; Paillier同态\nPrivacy-Preserving Online Task Assignment in Spatial Crowdsourcing: A Graph-based Approach 2022 差分隐私混淆位置\n@INPROCEEDINGS{9796827, author={Wang, Hengzhi and Wang, En and Yang, Yongjian and Wu, Jie and Dressler, Falko}, booktitle={IEEE INFOCOM 2022 - IEEE Conference on Computer Communications}, title={Privacy-Preserving Online Task Assignment in Spatial Crowdsourcing: A Graph-based Approach}, year={2022}, volume={}, number={}, pages={570-579}, doi={10.1109/INFOCOM48880.2022.9796827}} Keyword-based Secure Task Recommendation in Crowdsourcing 2016 利用可搜索加密以及代理重加密\nPrivacy-Preserving Task Recommendation Services for Crowdsourcing 2018 SSE 代理重加密 多关键字，使用多项式表示任务需求和工人兴趣\nAnonymous Privacy-Preserving Task Matching in Crowdsourcing 2018 SSE 代理加密，提供用户匿名性且可实现追踪和撤销\nPrivacy-Preserving Task Matching with Threshold Similarity Search via Vehicular Crowdsourcing 2021 SSE proxy re-encryption. 先基于关键字检索，然后根据位置筛选， 同时保护了关键字和位置\nPPTA: Privacy-Preserving Task Assignment Based on Inner-Product Functional Encryption in SAM 2023 Xu 同时保护关键字和位置\nPPTA: A location privacy-preserving and flexible task assignment service for spatial crowdsourcing 2023 Zhou 仅位置，使用两方的加法秘密共享,将工人位置和任务位置分别分割成两个秘密共享出去，但是安全性较弱，要求两个crowdsourcing server provider不合谋\nBlockchain-based Crowdsourcing Differentially Private Crowdsourcing With the Public and Private Blockchain identity and location\nTrustCom: 2020 Efficient Revocable Attribute-Based Encryption with Hidden Policies outsourced decryption, hidden policies and revocation support revocation: - update attribute group key and re-encrypt all ciphertext security proof 2021 White-Box Traceable Attribute-Based Encryption with Hidden Policies and Outsourced Decryption same authors for above paper add Algorithm $Trace, Revoke$ compare with Efficient Revocable Attribute-Based Encryption with Hidden Policies no security proof A Privacy-Enhanced Mobile Crowdsensing Strategy for Blockchain Empowered Internet of Medical Things This scheme classifies the uses by spectral clustering based on the social network. Therefore, the worker is assigned a specific task.\nPublicly Verifiable Inner Product Evaluation over Outsourced Data Streams under Multiple Keys 生成Proof需要向量明文，不可行\nShu, Jiangang, et al. \u0026ldquo;Proxy-free privacy-preserving task matching with efficient revocation in crowdsourcing.\u0026rdquo; IEEE Transactions on Dependable and Secure Computing 18.1 (2018): 117-130.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://liang512.github.io/post/papers/","summary":"Keyword-based matching Proxy-Free Privacy-Preserving Task Matching with Efficient Revocation in Crowdsourcing 1 这篇文章提出了一个无需代理重加密的基于关键字的任务匹配模型，支持用户撤销。作者公布代码。\n基本模型是经典的基于可搜索加密的关键字匹配模型，之后加入了 Server-Local Revocation (SLR)，实现用户撤销的思想很简单：服务器维护一个撤销用户列表 Revocation List (RL)，当有用户离开系统时，将该用户的相关信息存入RL实现撤销，在每次执行匹配算法时，服务器会先验证改用户是否在RL在，如果在RL中，则此次搜索终止，如不在RL中，说明此次搜索合法，进行匹配操作。\n之后为了减少RL的存储开销，作者提出了Global Revocation (GR)，为密钥、密文、搜索陷门加入了版本号（version number），系统周期性地执行$ReKeyGen$算法，清空RL，重新生成公钥、主私钥和密文更新密钥（用来更新之前版本的密文），并为worker分发新的密钥。\n优点：撤销机制简单\n缺点：每次匹配均需进行两次pairing操作以检查用户权限；在 GR 中，密钥机构需要周期性地上线执行$ReKeyGen$算法，即使是在RL为空时？（作者没有考虑这一点）。\n思考：学习到了撤销机制的实现方法：维护撤销用户列表和版本号。\n\u0026#x1f4dd; Note: 写文章思路：先写出一个基础方案，之后进行扩展，本文在基础匹配方案上扩展了用户撤销机制。先写SLR，然后针对 SLR 中RL的存储开销问题，提出GR，让系统定期清空RL，引入版本号。\nABE Attribute-Based Encryption with Publicly Verifiable Outsourced Decryption Transform算法输出的不是ElGamal形式的密文，而是把中间计算过程中的配对值输出。 验证者通过 sampling technique 随机选择pairing results进行验证。 Achieving public verification by combining sampling technique and game theory.\nMulti-Keyword Searchable and Verifiable Attribute-Based Encryption Over Cloud Data 只支持合取的关键字查询；需要公布一个关键字集合之间的映射；使用签名验证密文的complete； 是否可以做多关键字的检索 without bilinear pairing ?","title":"Papers"},{"content":"Implication The implication is important in mathematics. $\\phi$ implies $\\psi$ is denoted as $\\phi\\implies\\psi$, that means the truth of $\\psi$ follows from the truth of $\\phi$. And $\\phi$ is called antecedent and $\\psi$ is consequent. The truth table of $\\phi\\implies\\psi$ as follows:\n$\\phi$ $\\psi$ $\\phi\\implies\\psi$ T T T T F F F T T F F T The T denotes the truth and F denotes the false. A true conclusion from a true assumption, so the first row is true. If that implication is true, that means $\\psi$ would have to be T if $\\phi$ is T. So we cannot have $\\phi$ is T and $\\psi$ is F if $\\phi\\implies\\psi$ is T. Hence $\\phi\\implies\\psi$ must be F. We can look at \u0026ldquo;$\\phi$ does not imply $\\psi$\u0026rdquo; ($\\phi\\nRightarrow\\psi$) that is even through $\\phi$ is T, $\\psi$ is nevertheless F. So $\\phi\\nRightarrow\\psi$ is T if and only if $\\phi$ is T and $\\psi$ is F. In all other circumstances, $\\phi\\nRightarrow\\psi$ is F, which means $\\phi\\implies\\psi$ is T. So, the third and fourth rows are T. \u0026#x1f4dd; Note: The implication involves causality. For example, \u0026ldquo;$\\sqrt{2}$ is irrational\u0026rdquo; does not imply \u0026ldquo;$1+1=2$\u0026rdquo;, because this two statements has no relationship, they are independent of each other.\nEquivalence Two statements $\\phi$ and $\\psi$ are said to be equivalent if each implies the other. It is denoted $\\phi\\Leftrightarrow\\psi$ if $\\phi\\implies\\psi$ and $\\psi\\implies\\phi$. $\\phi\\Leftrightarrow\\psi$ is true if $\\phi$ and $\\psi$ are both true or both false.\n$\\phi$ $\\psi$ $\\phi\\implies\\psi$ $\\psi\\implies\\phi$ $\\phi\\Leftrightarrow\\psi$ T T T T T T F F T F F T T F F F F T F F Summary Assignment 4 Proof of modus ponens: The rule of logic stating that if a conditional statement ($\\phi\\land(\\phi\\implies\\psi)$) is accepted, and the antecedent ($\\phi$) holds, then the consequent ($\\psi$) may be inferred. $\\phi$ $\\psi$ $\\phi\\implies\\psi$ $\\phi\\land(\\phi\\implies\\psi)$ $[\\phi\\land(\\phi\\implies\\psi)]\\implies\\psi$ T T T T T T F F F T F T T F T F F T F T ","permalink":"https://liang512.github.io/post/mathematical_thinking_week2/","summary":"Implication The implication is important in mathematics. $\\phi$ implies $\\psi$ is denoted as $\\phi\\implies\\psi$, that means the truth of $\\psi$ follows from the truth of $\\phi$. And $\\phi$ is called antecedent and $\\psi$ is consequent. The truth table of $\\phi\\implies\\psi$ as follows:\n$\\phi$ $\\psi$ $\\phi\\implies\\psi$ T T T T F F F T T F F T The T denotes the truth and F denotes the false. A true conclusion from a true assumption, so the first row is true.","title":"Introduction to Mathematical Thinking Week2"},{"content":"Introduction or Related Work A long line of constructions 1, 2 operates by \u0026hellip; There is no way to \u0026hellip; Our scheme resorts to (technique) as \u0026hellip; to \u0026hellip; (implement some functions) \u0026hellip; by harnessing the power of (technology). The starting point of this paper is that while the recent solutions consider and solve the bare-bones \u0026hellip; problem in its simplest form, there are several desirable features that they fail to achieve. This makes \u0026hellip; inherently vulnerable to \u0026hellip; attacks, \u0026hellip;, which bridges together the recent advancements of blockchain and cryptographic techniques. 强调重要性 it is of paramount importance to 技术赋能 \u0026hellip; is a new way of viewing \u0026hellip; which opens up a much larger world of possibilities for \u0026hellip;. The enhanced functionality and flexibility provided by \u0026hellip; is very appealing for many practical applications. 因果 due to in order to owing to attribute to ascribe to 缩写 w.r.t. : with reference to / with respect to / with regards to. i.e.: a shortening of the Latin expression id est, which translates to “that is” e.g.: for example\n词汇 vanilla/conventional public-key encryption 传统公钥加密 common impediment bottleneck 瓶颈 describe delineate demonstrate ","permalink":"https://liang512.github.io/post/research/goodwritingsentence/","summary":"Introduction or Related Work A long line of constructions 1, 2 operates by \u0026hellip; There is no way to \u0026hellip; Our scheme resorts to (technique) as \u0026hellip; to \u0026hellip; (implement some functions) \u0026hellip; by harnessing the power of (technology). The starting point of this paper is that while the recent solutions consider and solve the bare-bones \u0026hellip; problem in its simplest form, there are several desirable features that they fail to achieve.","title":"GoodWritingSentence"},{"content":"When I run the git push command, I get the error:\n1 2 3 $ git push origin main kex_exchange identification: Connection closed by remote host connection closed by 20.205.243.166 port 22 Next, I checked the ssh key I found the following output:\n1 2 3 $ ssh -T github.com kex_exchange identification: Connection closed by remote host connection closed by 20.205.243.166 port 22 I tried many solutions including changing the port to 443, turning off the VPN, and regenerating the ssh key, none of which worked.\nFinally, I found that I can\u0026rsquo;t successfully run the curl google.com command, but can successfully run the curl baidu.com command. I guess that my proxy has errors. However, the browser proxy is functioning normally, so I guess there\u0026rsquo;s something wrong with my terminal proxy.\nRun the following command:\n$ curl ipinfo.io Cities are shown in China. Now the problem is very clear, that is, the terminal proxy is not turned on.\nIf you use VPN, then the problem is most likely that you do not have a terminal proxy enabled.\nWhen I turned on the terminal proxy, the problem was successfully solved. I use the macOS system. In macOS, the success of the browser proxy does not mean the success of the terminal proxy. For example, my proxy port is 7890, I run the following command:\nexport https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 If you use oh-my-zsh, you can use the plugin zsh-osx-autoproxy to automatically set the terminal proxy.\ngit clone https://github.com/sukkaw/zsh-osx-autoproxy ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-osx-autoproxy echo \u0026#34;plugins+=(zsh-osx-autoproxy)\u0026#34; | tee -a .zshrc References https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/ ","permalink":"https://liang512.github.io/post/bugterminalproxy/","summary":"When I run the git push command, I get the error:\n1 2 3 $ git push origin main kex_exchange identification: Connection closed by remote host connection closed by 20.205.243.166 port 22 Next, I checked the ssh key I found the following output:\n1 2 3 $ ssh -T github.com kex_exchange identification: Connection closed by remote host connection closed by 20.205.243.166 port 22 I tried many solutions including changing the port to 443, turning off the VPN, and regenerating the ssh key, none of which worked.","title":"记录一个关于代理的小坑"},{"content":"《死亡诗社》(Dead Poets Society)拍摄于1989年，讲的是一位反传统的教师教学生诗歌、生活的故事。背景是在威尔顿预科学院这座传统学校，从这里毕业的学生都能申请到很好的大学，类似于我们的衡水中学，新来的教师 Keating 没有使用传统的教学方法，他教学生们解放思想，不局限于课本。\n第一堂课他带着学生去了著名校友墙，让他们聆听死者的声音，这些人当年多么风光，多么不可一世，现在也只存在于相片之中，固一世之雄也，而今安在哉？历史总是在不断重复，相片中的他们和自己很相像，不同的是我们还活着，我们还有无限可能，这时候Keating对他们说 Carpe diem，其意为 seize the day，很多人翻译为及时行乐，要过好每一天。\n最经典的桥段肯定是Keating在教室说出：\n\u0026ldquo;We don\u0026rsquo;t read and write poetry because it\u0026rsquo;s cute. We read and write poetry because we are members of the human race. And the human race is filled with passion. And medicine, law, business, engineering, these are noble pursuits and necessary to sustain life. But poetry, beauty, romance, love, these are what we stay alive for. \u0026quot;\n这里 sustain 这个词用的很好，可以翻译为维持，现在所学的很多东西都是用来维持生活，而 poetry, beauty, romance, love 是我们生活的意义所在。\n国内的教育很少会教一个人如何获得幸福的生活，只会教你谋生的技能，（仅限于我见到的），从幼儿园开始就有奥数，小学就开始了各种功课作业，上了初中就开始题海战术了，高中则更甚，一切以成绩为出发点，诚然，有的家长会让孩子学习音乐，而他们让孩子学习音乐处于什么目的呢？大部分依旧是比比比，抑或是让自己孩子以后在学校里出色一点，有几个是真正去让孩子去感受音乐的美呢？我们生活的社会太过功利，以至于无法静下心来感受美，稍微做一些与学习成绩、求职简历无关的事便被说成不务正业。\n给我印象最深的是Neil的自杀，他不想按照父亲安排的路走，自己很喜欢当演员，但家里却不理解，自己又一直是一个孝顺儿子的角色，最后在家里的压力下自杀了。其实Neil的家庭从一开始就有伏笔，他的父亲不允许他在公众场合和自己理论，不允许他参加对学习成绩没有帮助的报社，而Neil只有妥协，装出孝顺的模样。Neil的自杀是影片的高潮，让观众不由自主的想起 Carpe diem ，我们真的应该思考如何度过这一生，如何抓住每一天，去做自己喜欢的事，爱自己喜欢的人，尽量不留遗憾。\n关于这篇影片有很大的争议，有的人认为老师不应该在这个时候教容易动摇的学生去解放天性，诱人觉得让学生走向父母既定的道路才是最好的，会生活的更好。可以理解这种想法，不是每个人都能强大到能遵从内心的选择的，他们会屈服，他们会被生活打败。\n你可能没有别人聪明，没有别人有钱，没有别人成功，但这不影响你可以拥有幸福的生活。\n看到此博文的你大概率是工科生，我想对你说，光学好算法是过不好生活的，生活不应该只有理性的分析，更需要感性。这更是我想对自己说的。\n","permalink":"https://liang512.github.io/post/deadpoetssociety/","summary":"《死亡诗社》(Dead Poets Society)拍摄于1989年，讲的是一位反传统的教师教学生诗歌、生活的故事。背景是在威尔顿预科学院这座传统学校，从这里毕业的学生都能申请到很好的大学，类似于我们的衡水中学，新来的教师 Keating 没有使用传统的教学方法，他教学生们解放思想，不局限于课本。\n第一堂课他带着学生去了著名校友墙，让他们聆听死者的声音，这些人当年多么风光，多么不可一世，现在也只存在于相片之中，固一世之雄也，而今安在哉？历史总是在不断重复，相片中的他们和自己很相像，不同的是我们还活着，我们还有无限可能，这时候Keating对他们说 Carpe diem，其意为 seize the day，很多人翻译为及时行乐，要过好每一天。\n最经典的桥段肯定是Keating在教室说出：\n\u0026ldquo;We don\u0026rsquo;t read and write poetry because it\u0026rsquo;s cute. We read and write poetry because we are members of the human race. And the human race is filled with passion. And medicine, law, business, engineering, these are noble pursuits and necessary to sustain life. But poetry, beauty, romance, love, these are what we stay alive for. \u0026quot;\n这里 sustain 这个词用的很好，可以翻译为维持，现在所学的很多东西都是用来维持生活，而 poetry, beauty, romance, love 是我们生活的意义所在。","title":"关于《死亡诗社》"},{"content":" Jucai Yang\n","permalink":"https://liang512.github.io/friends/","summary":"Jucai Yang","title":"Friends"},{"content":"This is my first blog. I\u0026rsquo;ve wanted to create a blog for a long time, but I didn\u0026rsquo;t realize it due to laziness. In this blog, I will share and record my life using English. Hope i can keep going.\nWell, now, I\u0026rsquo;m off to write the patent.\n","permalink":"https://liang512.github.io/post/first/","summary":"This is my first blog. I\u0026rsquo;ve wanted to create a blog for a long time, but I didn\u0026rsquo;t realize it due to laziness. In this blog, I will share and record my life using English. Hope i can keep going.\nWell, now, I\u0026rsquo;m off to write the patent.","title":"First"},{"content":" My name is Liang Li. I am studying master degree. my research interests include data security and privacy protection, public key cryptography, blockchain and crowdsourcing. This is my first site. I\u0026rsquo;ve wanted to create a site for a long time, but I didn\u0026rsquo;t realize it due to laziness. In this site, I will record my life for myself (when my memory fails me).\nMy Hobbies (keep changing): Alone in a daze Close to nature Fiction (e.g., ) Romance of the Three Kingdoms \u0026hellip;\u0026hellip; ","permalink":"https://liang512.github.io/about/","summary":"My name is Liang Li. I am studying master degree. my research interests include data security and privacy protection, public key cryptography, blockchain and crowdsourcing. This is my first site. I\u0026rsquo;ve wanted to create a site for a long time, but I didn\u0026rsquo;t realize it due to laziness. In this site, I will record my life for myself (when my memory fails me).\nMy Hobbies (keep changing): Alone in a daze Close to nature Fiction (e.","title":"About"},{"content":" github.com/nanxiaobei lee.so ","permalink":"https://liang512.github.io/contact/","summary":" github.com/nanxiaobei lee.so ","title":"Contact"},{"content":"1 Hi, everyone. I\u0026rsquo;m Li Liang. This morning I\u0026rsquo;d like to talk to you about privacy-preserving task matching in crowdsourcing. My presentation\u0026rsquo;s title is Bilateral Secure and Decentralized Crowdsourcing Task Matching Atop Consortium Blockchain.\n2. What is Crowdsourcing? First of all, we review what is crowdsourcing. Crowdsourcing relies on hundreds and thousands of people working in parallel time, collaboratively, to go solve complex problems.\nIt is seeking knowledge, goods, or services from a large body of people, including professional workers or freelancers.\n例子\nFor example, if there exists a company that wants to collect the weather situation in Shanghai. It can publish the task and recruit people who know the weather in a certain place, and collect the weather in various districts of Shanghai from these people. For example, A reports the weather in Baoshan is rainy. After, the company gets all weather situations from a large body of people.\n优点\nSo, crowdsourcing has lower costs, higher speed, and richer creativity compared with traditional outsourcing.\n3. Task Matching in Crowdsourcing Introduce crowdsourcing Basically, crowdsourcing has three entities: the requester is a task owner who publishes tasks to the server for worker recruitment, and the worker is a task executor.\nIntroduce task matching Task matching is a key phase in crowdsourcing, which needs to assign tasks to qualified workers according to requester-side task requirements or/and worker-side task preferences. They may be intercepted by malicious parties. And crowdsourcing platform is often honest-but-curious, which means the server can honestly perform task matching, but it will attempt to learn any information from received messages.\nIn crowdsourcing task matching, besides matching efficiency and flexibility, security and privacy issues are particularly primary concerns of the requester and worker, because these data are sensitive information.\n4. Existing Solutions—Traditional Crowdsourcing Auction In recent years, a line of works are presented to solve the privacy leakage problem in task matching. The existing privacy-preserving task-matching model mainly contains three types: auction-based, location-based, and keyword-based.\nThese models are only based on single attribute to achieve task matching, and the application scenarios are different.\nAuction-based is often used to maximize social welfare, location-based is often used in crowdsensing and keyword-based model is more flexible.\nPrivacy protection method For privacy, commonly used privacy protection methods are as follows: we can utilize commitment, hash function, or encryption algorithm to protect bids. Differential privacy is often used to protect location information. Searchable encryption is used to achieve privacy-preserving keyword-based task matching.\n5. Existing Solutions—based on Blockchain Why blockchain? Drawbacks of previous works These previous works were limited to the honest-but-curious adversary model. Furthermore, centralized crowdsourcing suffers from the notorious single-point-of-failure and collusion attacks. It may lead to unreliable matching and insufficient privacy protection issues.\nBlockchain Therefore, to solve these problems, blockchain-based crowdsourcing systems were proposed. Researchers use the properties of blockchain to build a decentralized crowdsourcing system.\nHow to combine blockchain and crowdsourcing? And, it is easy to combine blockchain and crowdsourcing, we just replace the centralized server with smart contracts to achieve reliable task matching. Right, it sounds simple. However, this will bring new privacy leakage challenges due to the transparency of smart contracts.\n6. Limitations of the Existing Solutions Therefore, the existing solutions have the following limitations: The matching model is oversimplified, which means most schemes are based on coarse-grained location or keyword and only consider one-party requirements and privacy. Additionally, although some schemes use the blockchain to replace the centralized server, these schemes are not really decentralized because there still exists a trusted entity for distributing user keys. Finally, the on-chain operation suffers from high overhead.\nTherefore, a decentralized crowdsourcing with dual-side privacy-preserving and flexible task matching is required.\n7. Motivations In more detail, We aim to build a decentralized crowdsourcing system with no central trust and dual-side privacy-preserving task matching, the privacy of requesters and workers are both protected. And the task matching should be flexible, which means requesters can select workers based on fine-grained task requirements and workers can retrieve tasks based on interested keywords. Finally, the matching should be trusted, matching operations should be performed reliably.\n8. ABE Traditional public key encryption is one-to-one, a ciphertext can only be decrypted by one private key, but in ABE, a ciphertext can be decrypted by multiple private keys, that is, in the encryption stage of ABE, an access policy can be specified for the ciphertext, anyone who meets the access policy can decrypt it.\nFor example, the encryptor can specify an access policy A and B to cipher. And then if the decryptor\u0026rsquo;s attribute set is AB, then he can decrypt the cipher. Certainly, the attribute set AC cannot decrypt the cipher.\n9. Design Rationale of Our Scheme This leads directly to the high-level design rationale of our scheme. In our scheme, the requester uploads the task ciphertext associated with task requirements denoted by vector $x$ to the blockchain, and the worker first retrieves the attribute key for attribute vector $v$ from the authority. Then, the worker can generate a search token associated with his interested keyword by running the $TokGen$ algorithm. The pre-defined smart contract then performs the $Search$ algorithm to achieve task matching if and only if the inner product of vectors $v$ and $x$ is $0$ and the task keyword and worker interested keyword are the same. Finally, the worker retrieves task cipher from the blockchain and derives task content.\nIn this way, sensitive data on the requester side, such as task content and task requirements, are protected by an encryption algorithm, and sensitive data on the worker, such as attributes and keywords, are also protected by a search token algorithm. And flexible task matching can be achieved. The requester can select workers according to task requirements, and workers can filter tasks according to keywords.\nFinally, the matching phase is performed on a smart contract, which guarantees our result is reliable.\n10. Technique Overview Now I\u0026rsquo;d like to move on to the technique overview. Note that TABE doesn\u0026rsquo;t have a keyword search algorithm. To enable keyword search, we design $TokenGen$ algorithm and $Search$ algorithm by adding $\\beta$-components to ciphertexts and search tokens.\nAnd then utilize the Viete formulas to generate policy and attribute vectors to reduce the ciphertext and key size.\nFinally, to resist malicious workers submitting incorrect attribute vector, we design 𝑃𝑟𝑜𝑜𝑓𝐺𝑒𝑛 algorithm and 𝑃𝑟𝑜𝑜𝑓𝑉𝑒𝑟𝑖𝑓𝑦 algorithm based on Pedersen Commitment.\n11. Vector Generation Now, I will explain the vector generation method based on the Viete formulas.\nWe use the AND-Gate access structure with wildcard. In the access structure, each attribute has multiple possible values, the notation \u0026lsquo;+\u0026rsquo; denotes this value is positive, \u0026lsquo;-\u0026rsquo; denotes the opposite, and \u0026lsquo;*\u0026rsquo; denotes the don\u0026rsquo;t care attribute. For example, in this table, Alice is a teacher in the CS department of University A, and Alice satisfies access structure W2 rather than W1.\nAnd the policy vector generation method is as follows: we denote the policy vector $x$ equals \u0026hellip; where Gamma and x are computed as these formulas. And the attribute vector $v$ is computed as the formulas.\n12. Vector Generation—Example For easy understanding, we give a vector generation example. The positive attribute value set J equals 1,4,6 and we set N equals 2. Then we compute $v$ in this way. V zero equals 1 to zero\u0026hellip; Then the vector $v$ equals (3,11,53,-1).\nFor access policy $W_2$, the positive attribute value set is Q and the wildcard attribute value set is P. Then we compute the vector x zero to x two and Gamma in this way.\nFinally, it is easy to check the inner product of v and x is zero.\n13. Pedersen Commitment Next, I will introduce a cryptographic commitment Pedersen Commitment, that allows one to generate a commitment to a message m without revealing m. At a later time, the commitment is opened by the sender to convince a receiver that the message is indeed m.\nThe Pedersen Commitment has three algorithms: setup, commit and verify.\nThe setup algorithm outputs two generators of a group G.\nThe commit algorithm takes as input a message m and a random element in $\\mathbb{Z}_p$ and outputs a commitment value $com=\u0026hellip;$.\nThe verify algorithm takes as input a commitment com, a message m, and an element r. This algorithm outputs 1 if com equals g to m times h to r, otherwise, outputs 0.\n14. Algorithm syntax Now, we give the algorithm syntax of our scheme. Our scheme is based on DIPE which has five basic algorithms. Setup, Authsetup, keygen, encrypt, and decrypt.\nSetup algorithm outputs public parameters.\nThe Authsetup performed by each authority and it outputs a key pair for authority.\nThe KeyGen generate a user secret key with public parameter, user global identifier GID, authority secret key ski and vector v.\nThe encrypt algorithm takes as input public key of all authorities, a vector x, a message m, and keyword w. It outputs cipher ctx.\nThe decrypt outputs message m if the inner product of v and x is zero.\nBesides, we discover proofGen and ProofVer algorithms to resist malicious user submit incorrect vectors.\nProofGen takes as input authority index i and worker attribute set D. The authority outputs proof p.\nProofVer takes as input all proof of authority and v submitted by user. It can verify the v whether correct.\nMoreover, the TokenGen algorithm takes as input the user secret key and keyword w\u0026rsquo; to generate a serach token. And the search algorithm takes as input the tk_v and ct_x, outputs 1 if $x\\times v=0$, which means the search is successful.\nThe latter part will be more technical. I just describe the high-level design.\n15. System Initialization Next, I will explain our scheme from the order in which the system runs.\nFirst, in system initialization, the setup and authsetup algorithms are performed.\nOur scheme is based on asymmetric bilinear pairing. This A is k+1 by k matrix and U is k+1 by k+1 matrix. g and h are generated for pedersen commitment. in authsetup algorithm, we add the beta-components to enable later keyword search.\n16. User registration Next, the worker computes his attribute vector v and sends it to authority to get secret keys. To verify v, authorities first perform proofGen for this worker. Assume 𝐷 is worker’s attribute value managed by 𝐴𝑈_𝑖. 𝐴𝑈_𝑖 computes commitment for 𝐷 as this formula. After then, the authority can perform proofver algorithm to verify the vector.\nFor ease to understand, we can see this example. Alice computes her vector as v. And then authorities compute the commitments of v as the table. For attribute 1, the commitments are in the first row, similarly, for attribute 4, the commitments are in the second row.\nFinally, the authority can check the $v_3$ whether satisfy this equation. we can conclude if the worker correctly computes v, then we have this equation.\n17. User registration After verification, the authority generates secret key for vector v. It first computes the mask value \\mu. Finally, the secret key as this formula. key_i1 will be used to generate search token.\n18. Search Token Generation The worker generates search token tk_v follows this way. The main idea of the algorithm is to add a random value t.\n19. Task and keyword cipher uploading In this phase, hybrid encryption is employed. The requester first selects a random symmetric key sk from G_T. And sk is encrypted by ABE with access policy x. In addition, this cipher also contains keyword associated components: C_1 and C hat.\n20. Reliable On-chain Task Matching After that, smart contract performed task matching, that is search algorithm with tk_v and ct_x.\nFirst, the smart contract computes e_1, this formula is responsible to test if the inner product of v and x equals 0.\nAfter that, if this equation holds, task matching is successful.\nwe can see the left part and right part of this equation is same iff v times x equals 0 and keyword w equals w\u0026rsquo;.\nAt this point, our task matching is completed\n21. Task Retrieval and Decryption Finally, the worker retrieves task cipher from blockchain and decrypt it to perform the task.\n22. Experiment Next, let me briefly talk about the experimental performance\nSetting These are some experiment settings. the task matching is deployed on hyperledger fabric. And we use a test tool called tape simulate transactions.\n1 off-chain These graphs show the off-chain performance, in the left figure, we tested the time overhead of each algorithm with different N, that is maximum number of wildcards in access structure.\nKeyGen has the highest overhead. When N=25, the overhead is 900ms, but this is acceptable, because, for each user, KeyGen only needs to run once at registration.\nAdditionlly, we compare our scheme with two works as the number of attributes increases. Our scheme shows better performance because its overhead is independent of the number of attributes.\n2 on-chain This is on-chain performance, we can see the throughput and latency of the task matching stage from the left figure with different N.\nIn addition, there is on-chain performance in the task uploading phase and a comparison with the task matching in reference 6.\n23. Summary Well, that concludes my presentation today, to refresh your memory, I\u0026rsquo;ll repeat the main points:\nwe design a policy-hiding multi-authority searchable ABE. we discover keyword search based on traditional ABE and reduce the size by utilizing viete.\nSecondly, we proposed a decentralized crowdsourcing with no central trust and dual-side privacy-preserving and flexible task matching.\nFinally, we also give the security analysis of the scheme in the paper.\n24. Thanks for your attention. I am happy to answer any questions you might have.\n","permalink":"https://liang512.github.io/post/presentation/","summary":"1 Hi, everyone. I\u0026rsquo;m Li Liang. This morning I\u0026rsquo;d like to talk to you about privacy-preserving task matching in crowdsourcing. My presentation\u0026rsquo;s title is Bilateral Secure and Decentralized Crowdsourcing Task Matching Atop Consortium Blockchain.\n2. What is Crowdsourcing? First of all, we review what is crowdsourcing. Crowdsourcing relies on hundreds and thousands of people working in parallel time, collaboratively, to go solve complex problems.\nIt is seeking knowledge, goods, or services from a large body of people, including professional workers or freelancers.","title":""},{"content":"红楼梦第二十六回： 颦儿才貌世应希，独报幽芳出绣闺； 呜咽一声犹未了，落花满地鸟惊飞。 写人美竟能如此清新脱俗，做个注解倒显得俗气\n","permalink":"https://liang512.github.io/post/thestoryofthestone/idea/","summary":"红楼梦第二十六回： 颦儿才貌世应希，独报幽芳出绣闺； 呜咽一声犹未了，落花满地鸟惊飞。 写人美竟能如此清新脱俗，做个注解倒显得俗气","title":""}]